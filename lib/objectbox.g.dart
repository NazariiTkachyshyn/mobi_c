// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'services/data_bases/object_box/models/nom.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7267715397295541197),
      name: 'ObNom',
      lastPropertyId: const IdUid(11, 4489590605171627329),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3878690552691398274),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1225013316628404657),
            name: 'ref',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7563345867198570317),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3028183838268531226),
            name: 'article',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4447064196371992799),
            name: 'parentKey',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 349954176695152497),
            name: 'imageKey',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8036011953633676593),
            name: 'unitKey',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2583911243502809439),
            name: 'descriptionLower',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4650133491600558510),
            name: 'articleLower',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7161420217736022023),
            name: 'isFolder',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(6, 2530145175776008345),
      lastIndexId: const IdUid(3, 7103564559432852772),
      lastRelationId: const IdUid(1, 722765356975776349),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        6879025521139470878,
        5521694212117040765,
        6985453350114521232,
        2401690754765832120,
        2530145175776008345
      ],
      retiredIndexUids: const [3024279412695165456, 9020169584786767910],
      retiredPropertyUids: const [
        2835483101819167717,
        4489590605171627329,
        5312977068715037429,
        260647958851481407,
        1842869755860105357,
        3498201845148066642,
        870048203181635540,
        5993533499103335044,
        3433106400630908473,
        6394411400387327402,
        1213495664106130246,
        7004431487949366806,
        2916520733024367230,
        410434834825563203,
        4837697549912629196,
        8402096546183612902,
        127150190425147610,
        8686531818291558388,
        1688642145731211482,
        6015736912050197449,
        3097670010478127553,
        1627018293343355778,
        4916868348974046367,
        7146399739788448595,
        3668035614159120563,
        1045652045117512153,
        8001125667147202437,
        5746051074440049002,
        7463922974071348735,
        463163445805795903,
        4338186138601759130,
        463301504714541900,
        4387579556907442762
      ],
      retiredRelationUids: const [722765356975776349],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ObNom: EntityDefinition<ObNom>(
        model: _entities[0],
        toOneRelations: (ObNom object) => [],
        toManyRelations: (ObNom object) => {},
        getId: (ObNom object) => object.id,
        setId: (ObNom object, int id) {
          object.id = id;
        },
        objectToFB: (ObNom object, fb.Builder fbb) {
          final refOffset =
              object.ref == null ? null : fbb.writeString(object.ref!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final articleOffset =
              object.article == null ? null : fbb.writeString(object.article!);
          final parentKeyOffset = object.parentKey == null
              ? null
              : fbb.writeString(object.parentKey!);
          final imageKeyOffset = object.imageKey == null
              ? null
              : fbb.writeString(object.imageKey!);
          final unitKeyOffset =
              object.unitKey == null ? null : fbb.writeString(object.unitKey!);
          final descriptionLowerOffset = object.descriptionLower == null
              ? null
              : fbb.writeString(object.descriptionLower!);
          final articleLowerOffset = object.articleLower == null
              ? null
              : fbb.writeString(object.articleLower!);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, refOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, articleOffset);
          fbb.addOffset(4, parentKeyOffset);
          fbb.addOffset(5, imageKeyOffset);
          fbb.addOffset(6, unitKeyOffset);
          fbb.addOffset(7, descriptionLowerOffset);
          fbb.addOffset(8, articleLowerOffset);
          fbb.addBool(9, object.isFolder);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ObNom(
              ref: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              isFolder: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 22),
              article: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              articleLower: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              descriptionLower: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              parentKey: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              unitKey: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0))
            ..imageKey = const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 14);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ObNom] entity fields to define ObjectBox queries.
class ObNom_ {
  /// see [ObNom.id]
  static final id = QueryIntegerProperty<ObNom>(_entities[0].properties[0]);

  /// see [ObNom.ref]
  static final ref = QueryStringProperty<ObNom>(_entities[0].properties[1]);

  /// see [ObNom.description]
  static final description =
      QueryStringProperty<ObNom>(_entities[0].properties[2]);

  /// see [ObNom.article]
  static final article = QueryStringProperty<ObNom>(_entities[0].properties[3]);

  /// see [ObNom.parentKey]
  static final parentKey =
      QueryStringProperty<ObNom>(_entities[0].properties[4]);

  /// see [ObNom.imageKey]
  static final imageKey =
      QueryStringProperty<ObNom>(_entities[0].properties[5]);

  /// see [ObNom.unitKey]
  static final unitKey = QueryStringProperty<ObNom>(_entities[0].properties[6]);

  /// see [ObNom.descriptionLower]
  static final descriptionLower =
      QueryStringProperty<ObNom>(_entities[0].properties[7]);

  /// see [ObNom.articleLower]
  static final articleLower =
      QueryStringProperty<ObNom>(_entities[0].properties[8]);

  /// see [ObNom.isFolder]
  static final isFolder =
      QueryBooleanProperty<ObNom>(_entities[0].properties[9]);
}
