// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'services/object_box/models/ob.barcode.dart';
import 'services/object_box/models/ob.price.dart';
import 'services/object_box/models/ob_counterparty.dart';
import 'services/object_box/models/ob_nom.dart';
import 'services/object_box/models/ob_order_nom.dart';
import 'services/object_box/models/ob_storage.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 7267715397295541197),
      name: 'ObNom',
      lastPropertyId: const obx_int.IdUid(10, 7161420217736022023),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3878690552691398274),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1225013316628404657),
            name: 'ref',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7563345867198570317),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3028183838268531226),
            name: 'article',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4447064196371992799),
            name: 'parentKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 349954176695152497),
            name: 'imageKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8036011953633676593),
            name: 'unitKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2583911243502809439),
            name: 'descriptionLower',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4650133491600558510),
            name: 'articleLower',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7161420217736022023),
            name: 'isFolder',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 6879025521139470878),
      name: 'ObPrice',
      lastPropertyId: const obx_int.IdUid(7, 2835483101819167717),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5312977068715037429),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 260647958851481407),
            name: 'priceType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1842869755860105357),
            name: 'packKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3498201845148066642),
            name: 'currencyKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 870048203181635540),
            name: 'nomKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5993533499103335044),
            name: 'price',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 5521694212117040765),
      name: 'ObStorage',
      lastPropertyId: const obx_int.IdUid(3, 7004431487949366806),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6394411400387327402),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1213495664106130246),
            name: 'refKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7004431487949366806),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 6985453350114521232),
      name: 'ObBarocde',
      lastPropertyId: const obx_int.IdUid(4, 8402096546183612902),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2916520733024367230),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 410434834825563203),
            name: 'packKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4837697549912629196),
            name: 'barcode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8402096546183612902),
            name: 'nomKey',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 2401690754765832120),
      name: 'ObCounterparty',
      lastPropertyId: const obx_int.IdUid(8, 7146399739788448595),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 127150190425147610),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8686531818291558388),
            name: 'refKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1688642145731211482),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6015736912050197449),
            name: 'mainCounterpartyKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3097670010478127553),
            name: 'fullDescription',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1627018293343355778),
            name: 'descriptionLower',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4916868348974046367),
            name: 'fullDescriptionLower',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7146399739788448595),
            name: 'partnerKey',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 2530145175776008345),
      name: 'ObOrderNom',
      lastPropertyId: const obx_int.IdUid(9, 4387579556907442762),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3668035614159120563),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1045652045117512153),
            name: 'orderId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8001125667147202437),
            name: 'ref',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5746051074440049002),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7463922974071348735),
            name: 'article',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 463163445805795903),
            name: 'imageKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4338186138601759130),
            name: 'unitKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 463301504714541900),
            name: 'qty',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4387579556907442762),
            name: 'price',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(6, 2530145175776008345),
      lastIndexId: const obx_int.IdUid(1, 3024279412695165456),
      lastRelationId: const obx_int.IdUid(1, 722765356975776349),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [3024279412695165456],
      retiredPropertyUids: const [2835483101819167717],
      retiredRelationUids: const [722765356975776349],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ObNom: obx_int.EntityDefinition<ObNom>(
        model: _entities[0],
        toOneRelations: (ObNom object) => [],
        toManyRelations: (ObNom object) => {},
        getId: (ObNom object) => object.id,
        setId: (ObNom object, int id) {
          object.id = id;
        },
        objectToFB: (ObNom object, fb.Builder fbb) {
          final refOffset =
              object.ref == null ? null : fbb.writeString(object.ref!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final articleOffset =
              object.article == null ? null : fbb.writeString(object.article!);
          final parentKeyOffset = object.parentKey == null
              ? null
              : fbb.writeString(object.parentKey!);
          final imageKeyOffset = object.imageKey == null
              ? null
              : fbb.writeString(object.imageKey!);
          final unitKeyOffset =
              object.unitKey == null ? null : fbb.writeString(object.unitKey!);
          final descriptionLowerOffset = object.descriptionLower == null
              ? null
              : fbb.writeString(object.descriptionLower!);
          final articleLowerOffset = object.articleLower == null
              ? null
              : fbb.writeString(object.articleLower!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, refOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, articleOffset);
          fbb.addOffset(4, parentKeyOffset);
          fbb.addOffset(5, imageKeyOffset);
          fbb.addOffset(6, unitKeyOffset);
          fbb.addOffset(7, descriptionLowerOffset);
          fbb.addOffset(8, articleLowerOffset);
          fbb.addBool(9, object.isFolder);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final refParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final isFolderParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 22);
          final articleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final articleLowerParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final descriptionLowerParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final parentKeyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final unitKeyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = ObNom(
              ref: refParam,
              isFolder: isFolderParam,
              article: articleParam,
              articleLower: articleLowerParam,
              description: descriptionParam,
              descriptionLower: descriptionLowerParam,
              parentKey: parentKeyParam,
              unitKey: unitKeyParam,
              id: idParam)
            ..imageKey = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14);

          return object;
        }),
    ObPrice: obx_int.EntityDefinition<ObPrice>(
        model: _entities[1],
        toOneRelations: (ObPrice object) => [],
        toManyRelations: (ObPrice object) => {},
        getId: (ObPrice object) => object.id,
        setId: (ObPrice object, int id) {
          object.id = id;
        },
        objectToFB: (ObPrice object, fb.Builder fbb) {
          final priceTypeOffset = object.priceType == null
              ? null
              : fbb.writeString(object.priceType!);
          final packKeyOffset =
              object.packKey == null ? null : fbb.writeString(object.packKey!);
          final currencyKeyOffset = object.currencyKey == null
              ? null
              : fbb.writeString(object.currencyKey!);
          final nomKeyOffset =
              object.nomKey == null ? null : fbb.writeString(object.nomKey!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, priceTypeOffset);
          fbb.addOffset(2, packKeyOffset);
          fbb.addOffset(3, currencyKeyOffset);
          fbb.addOffset(4, nomKeyOffset);
          fbb.addFloat64(5, object.price);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final priceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 14);
          final priceTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final packKeyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final currencyKeyParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final nomKeyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = ObPrice(
              price: priceParam,
              priceType: priceTypeParam,
              packKey: packKeyParam,
              currencyKey: currencyKeyParam,
              nomKey: nomKeyParam,
              id: idParam);

          return object;
        }),
    ObStorage: obx_int.EntityDefinition<ObStorage>(
        model: _entities[2],
        toOneRelations: (ObStorage object) => [],
        toManyRelations: (ObStorage object) => {},
        getId: (ObStorage object) => object.id,
        setId: (ObStorage object, int id) {
          object.id = id;
        },
        objectToFB: (ObStorage object, fb.Builder fbb) {
          final refKeyOffset =
              object.refKey == null ? null : fbb.writeString(object.refKey!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, refKeyOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final refKeyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = ObStorage(
              refKey: refKeyParam, description: descriptionParam, id: idParam);

          return object;
        }),
    ObBarocde: obx_int.EntityDefinition<ObBarocde>(
        model: _entities[3],
        toOneRelations: (ObBarocde object) => [],
        toManyRelations: (ObBarocde object) => {},
        getId: (ObBarocde object) => object.id,
        setId: (ObBarocde object, int id) {
          object.id = id;
        },
        objectToFB: (ObBarocde object, fb.Builder fbb) {
          final packKeyOffset =
              object.packKey == null ? null : fbb.writeString(object.packKey!);
          final barcodeOffset =
              object.barcode == null ? null : fbb.writeString(object.barcode!);
          final nomKeyOffset =
              object.nomKey == null ? null : fbb.writeString(object.nomKey!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, packKeyOffset);
          fbb.addOffset(2, barcodeOffset);
          fbb.addOffset(3, nomKeyOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final barcodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final packKeyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nomKeyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = ObBarocde(
              barcode: barcodeParam,
              packKey: packKeyParam,
              nomKey: nomKeyParam,
              id: idParam);

          return object;
        }),
    ObCounterparty: obx_int.EntityDefinition<ObCounterparty>(
        model: _entities[4],
        toOneRelations: (ObCounterparty object) => [],
        toManyRelations: (ObCounterparty object) => {},
        getId: (ObCounterparty object) => object.id,
        setId: (ObCounterparty object, int id) {
          object.id = id;
        },
        objectToFB: (ObCounterparty object, fb.Builder fbb) {
          final refKeyOffset =
              object.refKey == null ? null : fbb.writeString(object.refKey!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final mainCounterpartyKeyOffset = object.mainCounterpartyKey == null
              ? null
              : fbb.writeString(object.mainCounterpartyKey!);
          final fullDescriptionOffset = object.fullDescription == null
              ? null
              : fbb.writeString(object.fullDescription!);
          final descriptionLowerOffset = object.descriptionLower == null
              ? null
              : fbb.writeString(object.descriptionLower!);
          final fullDescriptionLowerOffset = object.fullDescriptionLower == null
              ? null
              : fbb.writeString(object.fullDescriptionLower!);
          final partnerKeyOffset = object.partnerKey == null
              ? null
              : fbb.writeString(object.partnerKey!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, refKeyOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, mainCounterpartyKeyOffset);
          fbb.addOffset(4, fullDescriptionOffset);
          fbb.addOffset(5, descriptionLowerOffset);
          fbb.addOffset(6, fullDescriptionLowerOffset);
          fbb.addOffset(7, partnerKeyOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final refKeyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final descriptionLowerParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final mainCounterpartyKeyParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final fullDescriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final fullDescriptionLowerParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final partnerKeyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = ObCounterparty(
              refKey: refKeyParam,
              description: descriptionParam,
              descriptionLower: descriptionLowerParam,
              mainCounterpartyKey: mainCounterpartyKeyParam,
              fullDescription: fullDescriptionParam,
              fullDescriptionLower: fullDescriptionLowerParam,
              partnerKey: partnerKeyParam,
              id: idParam);

          return object;
        }),
    ObOrderNom: obx_int.EntityDefinition<ObOrderNom>(
        model: _entities[5],
        toOneRelations: (ObOrderNom object) => [],
        toManyRelations: (ObOrderNom object) => {},
        getId: (ObOrderNom object) => object.id,
        setId: (ObOrderNom object, int id) {
          object.id = id;
        },
        objectToFB: (ObOrderNom object, fb.Builder fbb) {
          final refOffset =
              object.ref == null ? null : fbb.writeString(object.ref!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final articleOffset =
              object.article == null ? null : fbb.writeString(object.article!);
          final imageKeyOffset = object.imageKey == null
              ? null
              : fbb.writeString(object.imageKey!);
          final unitKeyOffset =
              object.unitKey == null ? null : fbb.writeString(object.unitKey!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.orderId);
          fbb.addOffset(2, refOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.addOffset(4, articleOffset);
          fbb.addOffset(5, imageKeyOffset);
          fbb.addOffset(6, unitKeyOffset);
          fbb.addInt64(7, object.qty);
          fbb.addFloat64(8, object.price);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final refParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final articleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final unitKeyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final orderIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final qtyParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final priceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 20);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = ObOrderNom(
              ref: refParam,
              article: articleParam,
              description: descriptionParam,
              unitKey: unitKeyParam,
              orderId: orderIdParam,
              qty: qtyParam,
              price: priceParam,
              id: idParam)
            ..imageKey = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ObNom] entity fields to define ObjectBox queries.
class ObNom_ {
  /// See [ObNom.id].
  static final id = obx.QueryIntegerProperty<ObNom>(_entities[0].properties[0]);

  /// See [ObNom.ref].
  static final ref = obx.QueryStringProperty<ObNom>(_entities[0].properties[1]);

  /// See [ObNom.description].
  static final description =
      obx.QueryStringProperty<ObNom>(_entities[0].properties[2]);

  /// See [ObNom.article].
  static final article =
      obx.QueryStringProperty<ObNom>(_entities[0].properties[3]);

  /// See [ObNom.parentKey].
  static final parentKey =
      obx.QueryStringProperty<ObNom>(_entities[0].properties[4]);

  /// See [ObNom.imageKey].
  static final imageKey =
      obx.QueryStringProperty<ObNom>(_entities[0].properties[5]);

  /// See [ObNom.unitKey].
  static final unitKey =
      obx.QueryStringProperty<ObNom>(_entities[0].properties[6]);

  /// See [ObNom.descriptionLower].
  static final descriptionLower =
      obx.QueryStringProperty<ObNom>(_entities[0].properties[7]);

  /// See [ObNom.articleLower].
  static final articleLower =
      obx.QueryStringProperty<ObNom>(_entities[0].properties[8]);

  /// See [ObNom.isFolder].
  static final isFolder =
      obx.QueryBooleanProperty<ObNom>(_entities[0].properties[9]);
}

/// [ObPrice] entity fields to define ObjectBox queries.
class ObPrice_ {
  /// See [ObPrice.id].
  static final id =
      obx.QueryIntegerProperty<ObPrice>(_entities[1].properties[0]);

  /// See [ObPrice.priceType].
  static final priceType =
      obx.QueryStringProperty<ObPrice>(_entities[1].properties[1]);

  /// See [ObPrice.packKey].
  static final packKey =
      obx.QueryStringProperty<ObPrice>(_entities[1].properties[2]);

  /// See [ObPrice.currencyKey].
  static final currencyKey =
      obx.QueryStringProperty<ObPrice>(_entities[1].properties[3]);

  /// See [ObPrice.nomKey].
  static final nomKey =
      obx.QueryStringProperty<ObPrice>(_entities[1].properties[4]);

  /// See [ObPrice.price].
  static final price =
      obx.QueryDoubleProperty<ObPrice>(_entities[1].properties[5]);
}

/// [ObStorage] entity fields to define ObjectBox queries.
class ObStorage_ {
  /// See [ObStorage.id].
  static final id =
      obx.QueryIntegerProperty<ObStorage>(_entities[2].properties[0]);

  /// See [ObStorage.refKey].
  static final refKey =
      obx.QueryStringProperty<ObStorage>(_entities[2].properties[1]);

  /// See [ObStorage.description].
  static final description =
      obx.QueryStringProperty<ObStorage>(_entities[2].properties[2]);
}

/// [ObBarocde] entity fields to define ObjectBox queries.
class ObBarocde_ {
  /// See [ObBarocde.id].
  static final id =
      obx.QueryIntegerProperty<ObBarocde>(_entities[3].properties[0]);

  /// See [ObBarocde.packKey].
  static final packKey =
      obx.QueryStringProperty<ObBarocde>(_entities[3].properties[1]);

  /// See [ObBarocde.barcode].
  static final barcode =
      obx.QueryStringProperty<ObBarocde>(_entities[3].properties[2]);

  /// See [ObBarocde.nomKey].
  static final nomKey =
      obx.QueryStringProperty<ObBarocde>(_entities[3].properties[3]);
}

/// [ObCounterparty] entity fields to define ObjectBox queries.
class ObCounterparty_ {
  /// See [ObCounterparty.id].
  static final id =
      obx.QueryIntegerProperty<ObCounterparty>(_entities[4].properties[0]);

  /// See [ObCounterparty.refKey].
  static final refKey =
      obx.QueryStringProperty<ObCounterparty>(_entities[4].properties[1]);

  /// See [ObCounterparty.description].
  static final description =
      obx.QueryStringProperty<ObCounterparty>(_entities[4].properties[2]);

  /// See [ObCounterparty.mainCounterpartyKey].
  static final mainCounterpartyKey =
      obx.QueryStringProperty<ObCounterparty>(_entities[4].properties[3]);

  /// See [ObCounterparty.fullDescription].
  static final fullDescription =
      obx.QueryStringProperty<ObCounterparty>(_entities[4].properties[4]);

  /// See [ObCounterparty.descriptionLower].
  static final descriptionLower =
      obx.QueryStringProperty<ObCounterparty>(_entities[4].properties[5]);

  /// See [ObCounterparty.fullDescriptionLower].
  static final fullDescriptionLower =
      obx.QueryStringProperty<ObCounterparty>(_entities[4].properties[6]);

  /// See [ObCounterparty.partnerKey].
  static final partnerKey =
      obx.QueryStringProperty<ObCounterparty>(_entities[4].properties[7]);
}

/// [ObOrderNom] entity fields to define ObjectBox queries.
class ObOrderNom_ {
  /// See [ObOrderNom.id].
  static final id =
      obx.QueryIntegerProperty<ObOrderNom>(_entities[5].properties[0]);

  /// See [ObOrderNom.orderId].
  static final orderId =
      obx.QueryIntegerProperty<ObOrderNom>(_entities[5].properties[1]);

  /// See [ObOrderNom.ref].
  static final ref =
      obx.QueryStringProperty<ObOrderNom>(_entities[5].properties[2]);

  /// See [ObOrderNom.description].
  static final description =
      obx.QueryStringProperty<ObOrderNom>(_entities[5].properties[3]);

  /// See [ObOrderNom.article].
  static final article =
      obx.QueryStringProperty<ObOrderNom>(_entities[5].properties[4]);

  /// See [ObOrderNom.imageKey].
  static final imageKey =
      obx.QueryStringProperty<ObOrderNom>(_entities[5].properties[5]);

  /// See [ObOrderNom.unitKey].
  static final unitKey =
      obx.QueryStringProperty<ObOrderNom>(_entities[5].properties[6]);

  /// See [ObOrderNom.qty].
  static final qty =
      obx.QueryIntegerProperty<ObOrderNom>(_entities[5].properties[7]);

  /// See [ObOrderNom.price].
  static final price =
      obx.QueryDoubleProperty<ObOrderNom>(_entities[5].properties[8]);
}
